[{"content":"From Spreadsheets to Scripts: My Journey Automating Accounting with Python My journey into process automation started at an accounting firm, where I quickly found myself buried in repetitive manual tasks and inefficient workflows. From processing invoices to reconciling spreadsheets, I could see how much time was being lost to work that could — and should — be automated.\nWhen I started working there, I spent the first few months organizing paperwork and doing basic data entry. I quickly realized two things:\nMany processes were slow, repetitive, and prone to errors. No one seemed to have time to improve them. That’s when I started asking questions: \u0026ldquo;Does it really need to be done this way?\u0026rdquo;, \u0026ldquo;Where are we losing time?\u0026rdquo;, \u0026ldquo;How can we simplify this?\u0026rdquo;\nThat curiosity led me to redesign small internal workflows. But there were limits. At some point, I realized automation was the only way to scale those improvements — and that’s how my journey into programming began. I chose Python for its simplicity, elegance, and power: with just a few lines, I could achieve more than hours of manual work.\nAnd I never looked back.\nWhy Automate Accounting Processes? Automation isn’t just about saving time. It’s a competitive necessity:\n✅ Fewer human errors — Scripts don’t get distracted or misplace columns.\n✅ More consistency — The process runs the same way every time.\n✅ Scalable efficiency — Workload can grow without doubling the team.\n✅ Happier employees — Free time for higher-value tasks like analysis and strategy.\n✅ Better compliance — Automatically validate rules and generate audit logs.\n✅ Data for decisions — Capture real-time metrics and identify bottlenecks.\nAutomation doesn’t replace people — it empowers them.\nWhy Python? Though it’s often associated with AI and Data Science, Python is a perfect fit for business automation:\n🧠 Simple syntax: easy to learn, even for non-developers like accountants.\n⚡ High productivity: do more with less code.\n🔧 Libraries for everything:\npandas, openpyxl: Excel, CSV, structured data smtplib, requests: email, APIs fuzzywuzzy, difflib: smart reconciliations pdfplumber, PyPDF2: PDF extraction playwright, Selenium: browser automation 🌍 Connects with everything: ERP, banks, government portals, web services.\n🤝 Massive community: solutions, tutorials, support — always just a search away.\nReal-World Examples of Python Automation 💼 Import and consolidate Excel files — hundreds of rows merged in seconds.\n🏦 Smart bank reconciliation — match statements using fuzzy logic.\n📈 Automated reporting — generate PDFs with charts and send by email.\n📥 ERP journal entries via API — connect to the ERP to post transactions from CSV files.\n📊 Internal dashboards — lightweight apps with real-time financial data.\n🧾 Tax validations — ensure correct VAT, dates, and NIF before submission.\nWhat About JavaScript/Node.js? JavaScript, with its Node.js runtime, can also be a good option for automating processes — especially in companies with strong web development teams. It’s a versatile language, backed by a large community, capable of handling both simple scripts and complex applications.\nHowever, when it comes to back-office automation — reading files, integrating systems, processing structured data — Python stands out for its simplicity and power.\nJavaScript shines in user interfaces and interactive tools, while Python is the go-to for silent, background automations that handle large volumes of data elegantly.\nBoth languages can coexist and complement each other. But for those coming from business or accounting roles, and looking to automate daily tasks, Python remains unbeatable thanks to its easy learning curve, library ecosystem, and productivity focus.\nThe Key Is Internal Knowledge The biggest competitive edge isn’t code — it’s knowing the process. When someone from inside the team understands the business and can code, they can build truly useful, tailored solutions.\nThat was my case: by understanding accounting workflows, I could apply Python to solve real problems. And that’s what many SMEs need: technology with context.\nWe’re here to solve problems — that’s why automation (and even AI) won’t replace people, but rather empower them. Automating means giving people the right tools to focus on what really matters and make higher-impact decisions.\nConclusion Automating accounting isn’t just about saving time. It’s about building systems that are efficient, reliable, and human-centered.\nIf you\u0026rsquo;re a company, invest in hybrid talent — people who understand the business and can code in Python.\nIf you\u0026rsquo;re an accounting professional, learn to code. You don’t need to be an engineer — just start small. That’s how I did it.\nPython taught me that automation is about taking better care of the work, the people, and the future of business.\nReady to explore how Python automation can save time, reduce errors, and bring real value to your accounting workflows? Let’s connect! Feel free to reach out via LinkedIn or check out some of my projects on GitHub. I’m always up for sharing ideas or collaborating on meaningful automation challenges.\n📌 GitHub • LinkedIn • LeetCode\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/python-accounting-automation/","summary":"\u003ch1 id=\"from-spreadsheets-to-scripts-my-journey-automating-accounting-with-python\"\u003eFrom Spreadsheets to Scripts: My Journey Automating Accounting with Python\u003c/h1\u003e\n\u003cp\u003eMy journey into process automation started at an accounting firm, where I quickly found myself buried in repetitive manual tasks and inefficient workflows. From processing invoices to reconciling spreadsheets, I could see how much time was being lost to work that could — and should — be automated.\u003c/p\u003e\n\u003cp\u003eWhen I started working there, I spent the first few months organizing paperwork and doing basic data entry. I quickly realized two things:\u003c/p\u003e","title":"From Spreadsheets to Scripts: My Journey Automating Accounting with Python"},{"content":"🧩 Problem: Roman to Integer (LeetCode 13) Convert a string representing a Roman numeral into its integer value. Roman numerals are typically written from largest to smallest (left to right), except for six well-known subtractive cases:\nI before V or X → 4, 9 X before L or C → 40, 90 C before D or M → 400, 900 ✅ Clean Idiomatic Solution (One-Pass) class Solution: SYMBOLS = { \u0026#39;I\u0026#39;: 1, \u0026#39;V\u0026#39;: 5, \u0026#39;X\u0026#39;: 10, \u0026#39;L\u0026#39;: 50, \u0026#39;C\u0026#39;: 100, \u0026#39;D\u0026#39;: 500, \u0026#39;M\u0026#39;: 1000 } def romanToInt(self, s: str) -\u0026gt; int: total = 0 prev_value = 0 for c in s: value = self.SYMBOLS[c] total += value - 2 * prev_value if value \u0026gt; prev_value else value prev_value = value return total Single loop Detects subtractive patterns with value \u0026gt; prev_value Clean inline logic ✅ Runtime: 3 ms (faster than 79.17%)\n✅ Memory: 17.6 MB (less than 90.19%)\n🔁 Overengineered (but fun!) Functional Version def romanToGenerator(s): from operator import add, sub SYMBOLS = { \u0026#39;I\u0026#39;: 1, \u0026#39;V\u0026#39;: 5, \u0026#39;X\u0026#39;: 10, \u0026#39;L\u0026#39;: 50, \u0026#39;C\u0026#39;: 100, \u0026#39;D\u0026#39;: 500, \u0026#39;M\u0026#39;: 1000 } total = 0 prev_val = 0 for c in s: val = SYMBOLS[c] op = sub if prev_val \u0026lt; val else add delta = val if op is add else val - 2 * prev_val total += delta yield total Uses operator.add / operator.sub Yields intermediate results step-by-step Great for teaching or tracing, but slower 📊 Benchmarks Version Avg. time (100K runs) Notes Idiomatic version ≈145 ms Fastest and cleanest Overengineered (list) ≈205 ms Stores operation pairs Overengineered (yield) ≈195 ms Generator-based, incremental 🧮 Complexity Analysis Time Complexity:\nBest / Worst / Average: O(n) — single pass Space Complexity:\nIdiomatic: O(1) (constant variables) Overengineered (list): O(n) (stores ops) Overengineered (yield): O(1) (no intermediate structure) ⏱️ Time Invested Reading and planning: 20 minutes Coding and analysis: 50 minutes Total: 1h10min 🧠 What I Learned Subtractive notation in Roman numerals can be generalized with value \u0026gt; prev_value. The difference between clean idiomatic solutions and overengineered abstractions in Python. How to benchmark Python code using timeit, and what tradeoffs come with generators and operator functions. The value of exploring multiple angles of a problem, even if the first solution works. 🌍 Real-World Applications Token-based parsing of custom numeric notations or symbolic expressions. Building interpreters or compilers that evaluate streams of symbols (e.g., financial codes, scientific notation). Teaching clean code versus functional design tradeoffs. Performance benchmarking and complexity analysis in educational content. 💬 Personal Note What started as a simple Roman numeral conversion turned into an exploration of Python idioms, operator functions, generator design, and performance benchmarking.\nEven the simplest problems can reveal new learning paths if you\u0026rsquo;re curious enough 🧠\n📂 Code Repository You can find my full source code for this solution on GitHub:\n📦 Repo: github.com/fredericogago/leetcode 📄 File: Roman to Integer.py 👨‍💻 Like this post? Let’s connect on LinkedIn or check out more on GitHub!\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/roman-to-integer/","summary":"\u003ch2 id=\"-problem-roman-to-integer-leetcode-13\"\u003e🧩 Problem: Roman to Integer (\u003ca href=\"https://leetcode.com/problems/roman-to-integer/\"\u003eLeetCode 13\u003c/a\u003e)\u003c/h2\u003e\n\u003cp\u003eConvert a string representing a Roman numeral into its integer value.\nRoman numerals are typically written from largest to smallest (left to right),\nexcept for six well-known subtractive cases:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eI before V or X → 4, 9\u003c/li\u003e\n\u003cli\u003eX before L or C → 40, 90\u003c/li\u003e\n\u003cli\u003eC before D or M → 400, 900\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-clean-idiomatic-solution-one-pass\"\u003e✅ Clean Idiomatic Solution (One-Pass)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eSYMBOLS\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s1\"\u003e\u0026#39;I\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;V\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;X\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s1\"\u003e\u0026#39;L\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;C\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s1\"\u003e\u0026#39;D\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e500\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;M\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eromanToInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eprev_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSYMBOLS\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eprev_value\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprev_value\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eprev_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSingle loop\u003c/li\u003e\n\u003cli\u003eDetects subtractive patterns with \u003ccode\u003evalue \u0026gt; prev_value\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClean inline logic\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e✅ Runtime: 3 ms (faster than 79.17%)\u003cbr\u003e\n✅ Memory: 17.6 MB (less than 90.19%)\u003c/p\u003e","title":"Roman to Integer — Clean, Fast, and Functional Approaches Compared"},{"content":"🧩 The Problem Given an integer x, determine whether it\u0026rsquo;s a palindrome — that is, whether it reads the same forwards and backwards.\n🔗 Problem Link: LeetCode 9. Palindrome Number\nExamples Input: x = 121 → Output: True Input: x = -121 → Output: False Input: x = 10 → Output: False Bonus: Can you solve it without converting the integer to a string?\n🔍 The Three Approaches I Explored 1. 💡 Direct Solution with String Conversion def isPalindrome(x: int) -\u0026gt; bool: return str(x) == str(x)[::-1] Simple and fast (4 ms on LeetCode) But does not satisfy the follow-up constraint of avoiding strings 2. 📐 Mathematical Reversal Using log10 and Closed-Form Formula Inspired by this StackExchange post, this solution uses a formula to reverse digits without strings:\nreverse(x) = x × 10ⁿ − 99 × Σₖ floor(x / 10ᵏ) × 10ⁿ⁻ᵏ ✅ No string conversion ✅ Mathematically elegant ⚠️ Slightly slower due to log10() and exponentiation ⚠️ Can suffer from floating-point rounding issues 3. ⚙️ Iterative Arithmetic Reversal (Preferred) def reverse(x: int) -\u0026gt; int: result = 0 while x \u0026gt; 0: result = result * 10 + x % 10 x //= 10 return result ✅ No strings ✅ Fast and stable ✅ Easy to understand and debug ⏱️ Benchmark Results Tested on values like 11, 101, 1001, ..., 10000001\nIterative method: ~0.000009 seconds Math (log10) method: ~0.000033 seconds ✅ Both produce the correct result 📌 Iterative is about 3.7× faster and more robust for real-world use\n🧠 What I Learned How to reverse integers purely with arithmetic How to benchmark small Python functions using time.perf_counter() That elegance can sometimes come at a performance cost How to choose the right tradeoff between readability, correctness, and efficiency 🌍 Real-World Applications Palindrome logic pops up in places like:\nInput validation (e.g. palindromic IDs) Data compression using symmetry Embedded systems that don’t allow string types Constraints in coding interviews or systems-level code (like drivers/firmware) 📂 Code Repository You can find my full source code for this solution on GitHub:\n📦 Repo: github.com/fredericogago/leetcode 📄 File: Palindrome Number.py ✍️ Final Thoughts Solving the same problem in multiple ways helps me grow not only as a developer, but as a technical communicator. Being able to solve is great. Being able to explain clearly — that’s where the real value is.\n\u0026ldquo;Hope it helps! I’m learning to write more elegant solutions with Python 3.13 and Clean Code.\u0026rdquo; 🚀\n👨‍💻 Like this post? Let’s connect on LinkedIn or check out more on GitHub!\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/palindrome-number/","summary":"\u003ch2 id=\"-the-problem\"\u003e🧩 The Problem\u003c/h2\u003e\n\u003cp\u003eGiven an integer \u003ccode\u003ex\u003c/code\u003e, determine whether it\u0026rsquo;s a palindrome — that is, whether it reads the same forwards and backwards.\u003c/p\u003e\n\u003cp\u003e🔗 Problem Link: \u003ca href=\"https://leetcode.com/problems/palindrome-number/description/\"\u003eLeetCode 9. Palindrome Number\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = 121   → Output: True\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = -121  → Output: False\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = 10    → Output: False\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eBonus: Can you solve it \u003cstrong\u003ewithout converting the integer to a string\u003c/strong\u003e?\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"-the-three-approaches-i-explored\"\u003e🔍 The Three Approaches I Explored\u003c/h2\u003e\n\u003ch3 id=\"1--direct-solution-with-string-conversion\"\u003e1. 💡 Direct Solution with String Conversion\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eisPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)[::\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSimple and fast (4 ms on LeetCode)\u003c/li\u003e\n\u003cli\u003eBut does \u003cstrong\u003enot\u003c/strong\u003e satisfy the follow-up constraint of avoiding strings\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"2--mathematical-reversal-using-log10-and-closed-form-formula\"\u003e2. 📐 Mathematical Reversal Using \u003ccode\u003elog10\u003c/code\u003e and Closed-Form Formula\u003c/h3\u003e\n\u003cp\u003eInspired by \u003ca href=\"https://math.stackexchange.com/q/480068\"\u003ethis StackExchange post\u003c/a\u003e, this solution uses a formula to reverse digits without strings:\u003c/p\u003e","title":"Is It a Palindrome Number? Three Ways to Solve It Without Converting to String"},{"content":"Hi, I\u0026rsquo;m Frederico Gago, a passionate software developer dedicated to crafting solutions that transform complexity into clarity. I specialize in Python 3.13, Clean Architecture, SOLID principles, and thoughtful design patterns, driven by the belief that great software should feel intuitive, empowering, and elegant.\nMy mission is to redefine the way professionals—especially in accounting and finance—interact with their daily tasks. By automating routine processes and eliminating friction, I aim to help people reclaim their focus and creativity, enabling them to achieve more meaningful and impactful outcomes.\nThis blog is my space to openly share the challenges and triumphs of my technical journey, offering insights and practical examples drawn from real-world experiences. Whether I\u0026rsquo;m optimizing backend services, designing robust abstractions, or enhancing developer workflows, each post reflects my commitment to continuous growth and excellence.\nFeel free to explore my work on GitHub or reach out through LinkedIn. Let\u0026rsquo;s connect and build software that makes work not just easier—but truly inspiring.\n","permalink":"https://fredericogago.github.io/frederico-gago/about/","summary":"\u003cp\u003eHi, I\u0026rsquo;m \u003cstrong\u003eFrederico Gago\u003c/strong\u003e, a passionate software developer dedicated to crafting solutions that transform complexity into clarity. I specialize in Python 3.13, Clean Architecture, SOLID principles, and thoughtful design patterns, driven by the belief that great software should feel intuitive, empowering, and elegant.\u003c/p\u003e\n\u003cp\u003eMy mission is to redefine the way professionals—especially in accounting and finance—interact with their daily tasks. By automating routine processes and eliminating friction, I aim to help people reclaim their focus and creativity, enabling them to achieve more meaningful and impactful outcomes.\u003c/p\u003e","title":"About"},{"content":"I\u0026rsquo;d love to hear from you—whether it\u0026rsquo;s to collaborate on a project, discuss software architecture, or simply connect.\nFeel free to reach out through any of the following:\n📧 Email: frederico.gago@hotmail.com\n💼 LinkedIn: linkedin.com/in/frederico-gago-5849281aa\n💻 GitHub: github.com/fredericogago\n🧠 LeetCode: leetcode.com/u/fredericogago\n","permalink":"https://fredericogago.github.io/frederico-gago/contact/","summary":"\u003cp\u003eI\u0026rsquo;d love to hear from you—whether it\u0026rsquo;s to collaborate on a project, discuss software architecture, or simply connect.\u003c/p\u003e\n\u003cp\u003eFeel free to reach out through any of the following:\u003c/p\u003e\n\u003cp\u003e📧 \u003cstrong\u003eEmail\u003c/strong\u003e: \u003ca href=\"mailto:frederico.gago@hotmail.com\"\u003efrederico.gago@hotmail.com\u003c/a\u003e\u003cbr\u003e\n💼 \u003cstrong\u003eLinkedIn\u003c/strong\u003e: \u003ca href=\"https://www.linkedin.com/in/frederico-gago-5849281aa\"\u003elinkedin.com/in/frederico-gago-5849281aa\u003c/a\u003e\u003cbr\u003e\n💻 \u003cstrong\u003eGitHub\u003c/strong\u003e: \u003ca href=\"https://github.com/fredericogago\"\u003egithub.com/fredericogago\u003c/a\u003e\u003cbr\u003e\n🧠 \u003cstrong\u003eLeetCode\u003c/strong\u003e: \u003ca href=\"https://leetcode.com/u/fredericogago\"\u003eleetcode.com/u/fredericogago\u003c/a\u003e\u003c/p\u003e","title":"Contact"}]