[{"content":"🧩 The Problem Given an integer x, determine whether it\u0026rsquo;s a palindrome — that is, whether it reads the same forwards and backwards.\n🔗 Problem Link: LeetCode 9. Palindrome Number\nExamples Input: x = 121 → Output: True Input: x = -121 → Output: False Input: x = 10 → Output: False Bonus: Can you solve it without converting the integer to a string?\n🔍 The Three Approaches I Explored 1. 💡 Direct Solution with String Conversion def isPalindrome(x: int) -\u0026gt; bool: return str(x) == str(x)[::-1] Simple and fast (4 ms on LeetCode) But does not satisfy the follow-up constraint of avoiding strings 2. 📐 Mathematical Reversal Using log10 and Closed-Form Formula Inspired by this StackExchange post, this solution uses a formula to reverse digits without strings:\nreverse(x) = x × 10ⁿ − 99 × Σₖ floor(x / 10ᵏ) × 10ⁿ⁻ᵏ ✅ No string conversion ✅ Mathematically elegant ⚠️ Slightly slower due to log10() and exponentiation ⚠️ Can suffer from floating-point rounding issues 3. ⚙️ Iterative Arithmetic Reversal (Preferred) def reverse(x: int) -\u0026gt; int: result = 0 while x \u0026gt; 0: result = result * 10 + x % 10 x //= 10 return result ✅ No strings ✅ Fast and stable ✅ Easy to understand and debug ⏱️ Benchmark Results Tested on values like 11, 101, 1001, ..., 10000001\nIterative method: ~0.000009 seconds Math (log10) method: ~0.000033 seconds ✅ Both produce the correct result 📌 Iterative is about 3.7× faster and more robust for real-world use\n🧠 What I Learned How to reverse integers purely with arithmetic How to benchmark small Python functions using time.perf_counter() That elegance can sometimes come at a performance cost How to choose the right tradeoff between readability, correctness, and efficiency 🌍 Real-World Applications Palindrome logic pops up in places like:\nInput validation (e.g. palindromic IDs) Data compression using symmetry Embedded systems that don’t allow string types Constraints in coding interviews or systems-level code (like drivers/firmware) 📂 Code Repository You can find my full source code for this solution on GitHub:\n📦 Repo: github.com/fredericogago/leetcode 📄 File: Palindrome Number.py ✍️ Final Thoughts Solving the same problem in multiple ways helps me grow not only as a developer, but as a technical communicator. Being able to solve is great. Being able to explain clearly — that’s where the real value is.\n\u0026ldquo;Hope it helps! I’m learning to write more elegant solutions with Python 3.13 and Clean Code.\u0026rdquo; 🚀\n👨‍💻 Like this post? Let’s connect on LinkedIn or check out more on GitHub!\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/palindrome-number/","summary":"\u003ch2 id=\"-the-problem\"\u003e🧩 The Problem\u003c/h2\u003e\n\u003cp\u003eGiven an integer \u003ccode\u003ex\u003c/code\u003e, determine whether it\u0026rsquo;s a palindrome — that is, whether it reads the same forwards and backwards.\u003c/p\u003e\n\u003cp\u003e🔗 Problem Link: \u003ca href=\"https://leetcode.com/problems/palindrome-number/description/\"\u003eLeetCode 9. Palindrome Number\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = 121   → Output: True\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = -121  → Output: False\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = 10    → Output: False\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eBonus: Can you solve it \u003cstrong\u003ewithout converting the integer to a string\u003c/strong\u003e?\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"-the-three-approaches-i-explored\"\u003e🔍 The Three Approaches I Explored\u003c/h2\u003e\n\u003ch3 id=\"1--direct-solution-with-string-conversion\"\u003e1. 💡 Direct Solution with String Conversion\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eisPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)[::\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSimple and fast (4 ms on LeetCode)\u003c/li\u003e\n\u003cli\u003eBut does \u003cstrong\u003enot\u003c/strong\u003e satisfy the follow-up constraint of avoiding strings\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"2--mathematical-reversal-using-log10-and-closed-form-formula\"\u003e2. 📐 Mathematical Reversal Using \u003ccode\u003elog10\u003c/code\u003e and Closed-Form Formula\u003c/h3\u003e\n\u003cp\u003eInspired by \u003ca href=\"https://math.stackexchange.com/q/480068\"\u003ethis StackExchange post\u003c/a\u003e, this solution uses a formula to reverse digits without strings:\u003c/p\u003e","title":"Is It a Palindrome Number? Three Ways to Solve It Without Converting to String"},{"content":"Hi, I\u0026rsquo;m Frederico Gago, a software developer passionate about solving problems through clean, scalable, and efficient systems. I specialize in Python 3.13, Clean Architecture, SOLID principles, and layered design patterns that stand the test of complexity.\nMy mission is to improve the way people work—especially in fields like accounting and finance—by automating repetitive tasks and removing operational noise. I believe software should empower people to focus on what truly matters: thinking, analyzing, and making meaningful decisions.\nThis blog is where I document my learning process, share practical implementations, and reflect on challenges I face in real-world development. Whether it\u0026rsquo;s refining backend services, crafting robust abstractions, or simplifying workflows, you’ll find honest, hands-on insights here.\nFeel free to explore my GitHub or connect with me on LinkedIn.\nLet’s build software that makes work feel like progress.\n","permalink":"https://fredericogago.github.io/frederico-gago/about/","summary":"\u003cp\u003eHi, I\u0026rsquo;m \u003cstrong\u003eFrederico Gago\u003c/strong\u003e, a software developer passionate about solving problems through clean, scalable, and efficient systems. I specialize in Python 3.13, Clean Architecture, SOLID principles, and layered design patterns that stand the test of complexity.\u003c/p\u003e\n\u003cp\u003eMy mission is to improve the way people work—especially in fields like accounting and finance—by automating repetitive tasks and removing operational noise. I believe software should empower people to focus on what truly matters: thinking, analyzing, and making meaningful decisions.\u003c/p\u003e","title":"About"},{"content":"You can reach me at:\n📧 Email: frederico.gago@hotmail.com\n💼 LinkedIn: linkedin.com/in/frederico-gago-5849281aa\n💻 GitHub: github.com/fredericogago\nOr use the contact form (coming soon).\n","permalink":"https://fredericogago.github.io/frederico-gago/contact/","summary":"\u003cp\u003eYou can reach me at:\u003c/p\u003e\n\u003cp\u003e📧 Email: \u003ca href=\"mailto:frederico.gago@hotmail.com\"\u003efrederico.gago@hotmail.com\u003c/a\u003e\u003cbr\u003e\n💼 LinkedIn: \u003ca href=\"https://www.linkedin.com/in/frederico-gago-5849281aa\"\u003elinkedin.com/in/frederico-gago-5849281aa\u003c/a\u003e\u003cbr\u003e\n💻 GitHub: \u003ca href=\"https://github.com/fredericogago\"\u003egithub.com/fredericogago\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eOr use the contact form (coming soon).\u003c/p\u003e","title":"Contact"},{"content":"Introduction In this post, we\u0026rsquo;ll explore some new features in Python 3.13.\nWhat’s New Feature 1 Feature 2 Conclusion Python 3.13 brings valuable improvements. More in future posts!\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/python-3-13-overview/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this post, we\u0026rsquo;ll explore some new features in Python 3.13.\u003c/p\u003e\n\u003ch2 id=\"whats-new\"\u003eWhat’s New\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eFeature 1\u003c/li\u003e\n\u003cli\u003eFeature 2\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003ePython 3.13 brings valuable improvements. More in future posts!\u003c/p\u003e","title":"My First Post"}]