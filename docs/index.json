[{"content":"Building a Production-Grade Unit of Work (UoW) System in Python with SQLAlchemy When you build complex applications with databases, services, and background jobs, you eventually run into the transaction problem:\nHow do I guarantee all operations happen atomically? How do I handle nested scopes (reuse vs rollback)? How do I ensure events are only published once? How do I protect against duplicate commits when retries happen? The solution is a Unit of Work (UoW) system ‚Äî a design pattern that wraps all your persistence operations in a clear, explicit transaction boundary.\nIn this post, I‚Äôll show you how I built a production-grade UoW system in Python 3.13 using async SQLAlchemy, with:\nExplicit transaction boundaries Safe nesting (reuse vs savepoint) Read-only transactions Transactional outbox for events Idempotency key protection Great testing story üö® The Problem: Repos Without Boundaries A naive service might look like this:\nuser = await user_repo.create(User(...)) order = await order_repo.create(Order(...)) await email_service.send_order_confirmation(order) But what if the order commit fails while the email has already been sent? You‚Äôve just created an inconsistent state.\nWithout a transaction boundary, repositories can be called arbitrarily, leading to partial failures and ghost side effects.\n‚úÖ The Solution: Unit of Work + Manager The UoW system enforces a strict rule:\nüëâ All repos must be accessed through a UoW scope.\nA service now looks like this:\nasync with uow_manager.enter(mode=UoWMode.REUSE) as uow: user = await uow.repos.user.create(User(...)) order = await uow.repos.order.create(Order(...)) uow.add_event(\u0026#34;order.created\u0026#34;, {\u0026#34;order_id\u0026#34;: order.id}) At the end of the scope:\nIf everything succeeded ‚Üí commit. If something failed ‚Üí rollback. Events are persisted only on outermost commit. üßë‚Äçüíª The Code SqlAlchemyUoWBase This is the core UoW implementation. It wraps an AsyncSession, tracks events and idempotency keys, and handles nesting rules.\nclass SqlAlchemyUoWBase[IRepos](IUnitOfWork[IRepos]): \u0026#34;\u0026#34;\u0026#34;Unit-of-Work facade with nesting support (reuse vs savepoint).\u0026#34;\u0026#34;\u0026#34; def __init__( self, session: AsyncSession, level: int, *, read_only: bool = False, event_sink: EventSink, idem_box: IdemBox, ) -\u0026gt; None: self._s = session self._level = level self._read_only = read_only self._active = True self._tx = None self._events = event_sink self._idem_box = idem_box self._repos: IRepos | None = None ... UoWManager The manager ensures that:\nSessions are reused across nested scopes Events/idempotency are shared at all levels Commit/rollback/close are coordinated correctly class UoWManager[UowBaseT, IRepos](IUoWManager): \u0026#34;\u0026#34;\u0026#34;Creates UoW scopes over a shared AsyncSession with nesting support.\u0026#34;\u0026#34;\u0026#34; @asynccontextmanager async def enter(self, *, mode: UoWMode = UoWMode.REUSE, read_only: bool = False): mark_enter(self._label) try: if self._session is None: self._session = self._sf() self._event_sink = EventSink(items=[]) self._idem_box = IdemBox() level = len(self._stack) + 1 nested = level \u0026gt; 1 and mode is UoWMode.SAVEPOINT start_tx = (level == 1) or nested uow = self._uow_cls( self._session, level, read_only=read_only, event_sink=self._event_sink, idem_box=self._idem_box, ) uow.set_repos(self._repo_factory(self._session)) self._stack.append(uow) await uow.start(start_tx=start_tx) try: yield uow await uow.commit(started_tx=start_tx) except Exception: await uow.rollback(started_tx=start_tx) raise finally: self._stack.pop() if not self._stack: await self._session.close() self._session = None self._event_sink = None self._idem_box = None finally: mark_exit(self._label) üîÑ Visual Flow Outermost Transaction (Level 1) BEGIN TRANSACTION ... repo operations ... COMMIT ‚Üí Flush outbox ‚Üí Persist idempotency key Nested Reuse (Level \u0026gt; 1, REUSE) (no BEGIN, reuse outer tx) ... repo operations ... (no COMMIT, outer decides) Nested Savepoint (Level \u0026gt; 1, SAVEPOINT) BEGIN NESTED (savepoint) ... repo operations ... RELEASE SAVEPOINT üì¶ Events + Idempotency Both inner and outer scopes share the same sinks:\nEventSink ‚Üí events are buffered and only persisted to the outbox table on the outermost commit IdemBox ‚Üí idempotency key ensures retries don‚Äôt double-commit uow.add_event(\u0026#34;user.created\u0026#34;, {\u0026#34;id\u0026#34;: 123}) uow.set_idempotency_key(\u0026#34;req-uuid\u0026#34;) # Outer commit persists: # - Outbox row # - Idempotency key row üìä Quick Comparison Mode Behavior Use Case OUTERMOST Starts real transaction, commits, flushes events Normal service call REUSE Shares outer transaction, no BEGIN/COMMIT Helpers that must be atomic with parent SAVEPOINT Creates nested savepoint, rollback safe Risky operations (e.g., optional steps) üß™ Testing with Fake UoWManager One of the biggest benefits of this design is that you can easily fake the UoW in tests.\nInstead of creating a real SQLAlchemy session, you inject in-memory repositories.\nFake Manager Example class FakeConfigRepo(IConfigRepo): def __init__(self): self.items = [] async def get_configurations_by_group_name(self, group_name): return [i for i in self.items if i.group == group_name] class FakeRepos(IConfigRepos): def __init__(self): self._config = FakeConfigRepo() @property def config(self) -\u0026gt; IConfigRepo: return self._config class FakeUoW(IUnitOfWork[FakeRepos]): def __init__(self): self._repos = FakeRepos() self._active = True @property def repos(self) -\u0026gt; FakeRepos: return self._repos async def commit(self, *, started_tx: bool) -\u0026gt; None: ... async def rollback(self, *, started_tx: bool) -\u0026gt; None: ... async def close(self) -\u0026gt; None: ... def add_event(self, *, event_type: str, payload: dict) -\u0026gt; None: ... def set_idempotency_key(self, key: str | None) -\u0026gt; None: ... @property def level(self) -\u0026gt; int: return 1 @property def is_active(self) -\u0026gt; bool: return self._active class FakeUoWManager(IUoWManager): async def enter(self, *, mode=UoWMode.REUSE, read_only=False): uow = FakeUoW() yield uow Example Test async def test_get_configs_returns_items(): mgr = FakeUoWManager() async with mgr.enter() as uow: uow.repos.config.items.append(ConfigItem(group=\u0026#34;general\u0026#34;, key=\u0026#34;x\u0026#34;, value=\u0026#34;1\u0026#34;)) service = ConfigService(uow.repos.config) result = await service.get_configurations_by_group_name(\u0026#34;general\u0026#34;) assert result.is_ok() assert len(result.unwrap()) == 1 This way:\nNo database required No transactions opened Service logic is testable in isolation ‚ö° Performance Notes One subtle advantage of this design is control over transaction cost.\nREUSE mode is the fastest:\nNo new transaction, no savepoint, no roundtrips. Best when nested operations are always safe to run under the parent scope. SAVEPOINT mode adds overhead:\nEach savepoint requires SQL roundtrips (SAVEPOINT, ROLLBACK TO, RELEASE). Use it when you need to isolate risky steps without aborting the entire parent transaction. Example rule of thumb:\nUse REUSE for 95% of nested calls (normal service-to-service collaboration). Use SAVEPOINT sparingly (e.g., optional third-party calls, best-effort cleanups). This balance keeps transactions fast, predictable, and resilient.\nüèÅ Closing Thoughts The Unit of Work pattern is not just a persistence abstraction. It‚Äôs a contract:\nEvery service runs inside a transaction. Events are only published if the transaction commits. Duplicate commits are prevented with idempotency. With this system, my services are safer, my tests are easier, and my architecture is cleaner.\nIn asynchronous apps built with SQLAlchemy + FastAPI, a combination of UoW Manager + UoW Base delivers safety, testability, and a clean architecture.\nüí¨ Do you prefer implicit context (via contextvars) or explicit scopes like this? Share your thoughts!\nLinkedIn GitHub ","permalink":"https://fredericogago.github.io/frederico-gago/posts/uow-sqlalchemy-python/","summary":"\u003ch1 id=\"building-a-production-grade-unit-of-work-uow-system-in-python-with-sqlalchemy\"\u003eBuilding a Production-Grade Unit of Work (UoW) System in Python with SQLAlchemy\u003c/h1\u003e\n\u003cp\u003eWhen you build complex applications with \u003cstrong\u003edatabases, services, and background jobs\u003c/strong\u003e, you eventually run into the \u003cstrong\u003etransaction problem\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow do I guarantee all operations happen \u003cstrong\u003eatomically\u003c/strong\u003e?\u003c/li\u003e\n\u003cli\u003eHow do I handle \u003cstrong\u003enested scopes\u003c/strong\u003e (reuse vs rollback)?\u003c/li\u003e\n\u003cli\u003eHow do I ensure \u003cstrong\u003eevents are only published once\u003c/strong\u003e?\u003c/li\u003e\n\u003cli\u003eHow do I protect against \u003cstrong\u003eduplicate commits\u003c/strong\u003e when retries happen?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe solution is a \u003cstrong\u003eUnit of Work (UoW) system\u003c/strong\u003e ‚Äî a design pattern that \u003cstrong\u003ewraps all your persistence operations in a clear, explicit transaction boundary\u003c/strong\u003e.\u003c/p\u003e","title":"Unit of Work (UoW) in Python with SQLAlchemy: explicit transactions, savepoints, and outbox"},{"content":" Resumo: Como automatizei a reconcilia√ß√£o mensal de contribui√ß√µes entre um ERP e um portal externo.\nMostro padr√µes reutiliz√°veis: bounded concurrency, retry com backoff + jitter, toler√¢ncia monet√°ria, bucketiza√ß√£o por per√≠odo+taxa e upsert idempotente de diverg√™ncias ‚Äî usando value objects (YearMonth, Money) e ports (interfaces).\nSem expor integra√ß√µes reais: o foco √© a arquitetura e as ideias reutiliz√°veis.\n‚öôÔ∏è Contexto \u0026amp; Problema Em RH, ap√≥s o processamento salarial (at√© dia 10 em PT), √© enviado o mapa de contribui√ß√µes do m√™s anterior para o portal oficial.\nSe ocorrerem altera√ß√µes ap√≥s o envio (ajustes, faltas, pr√©mios, corre√ß√µes), √© f√°cil esquecer o reenvio do mapa corrigido ‚Äî gerando inconsist√™ncias com risco regulat√≥rio e retrabalho.\nObjetivo: conferir mensalmente se o que est√° no ERP bate com o portal externo, sinalizando diverg√™ncias de forma autom√°tica, r√°pida e audit√°vel.\nTempo poupado m√©dio (por empresa/m√™s): ~5 min (quando existia pol√≠tica de confer√™ncia manual). Redu√ß√£o de falhas humanas: elimina√ß√£o de esquecimentos sistem√°ticos. Base para alertas e relat√≥rios autom√°ticos. Nota: este artigo n√£o √© aconselhamento jur√≠dico; o foco √© reduzir risco operacional e facilitar conformidade.\nüß± Padr√µes Arquiteturais (reutiliz√°veis) Value Objects YearMonth (faixas, ordena√ß√£o, √∫ltimos 12 meses conclu√≠dos‚Ä¶) Money (moeda, aritm√©tica segura, formata√ß√£o PT) Bucketiza√ß√£o por (ano, m√™s, taxa) antes de comparar. Toler√¢ncia monet√°ria para evitar falsos positivos por arredondamentos. Concorr√™ncia limitada (bounded semaphores) para proteger recursos (DB/ERP/Browser). Retry com backoff exponencial + jitter para chamadas mais fr√°geis (portal). Upsert idempotente de diverg√™ncias (grava/atualiza s√≥ se mudou). Ports/Adapters: IErpService, IPortalService, IRepo. üß© Value Objects (excerto) YearMonth (intervalos de 12 meses conclu√≠dos, ordena√ß√£o, formata√ß√£o):\n@dataclass(frozen=True) class YearMonth: year: int month: int fmt: str = field(default=\u0026#34;%Y-%m\u0026#34;, repr=False) # ... valida√ß√£o, formatted, parse, range, compara√ß√£o, last_12_completed_months() ... Money (inteiros em c√™ntimos, aritm√©tica segura, formata√ß√£o PT):\n@dataclass(frozen=True) class Money: amount_cents: int original: str input_value: Any currency: CurrencyCode = CurrencyCode.EUR # .amount -\u0026gt; Decimal, from_raw(), +, -, *, /, format_pt(), parse_percentage() ... Estes VOs isolam complexidade de datas mensais e quantias monet√°rias (arredondamentos, parsing, igualdade), reduzindo bugs na reconcilia√ß√£o.\nüîå Portas (interfaces) \u0026amp; DTOs Diverg√™ncia (DTO) ‚Äî ‚Äúfotografia‚Äù est√°vel p/ persistir e reportar @dataclass(frozen=True) class MismatchDTO: company: CompanyRef period: YearMonth erp_remuneration: Money portal_remuneration: Money erp_contribution: Money portal_contribution: Money difference: Money tax: Decimal Reposit√≥rio (abstrato) ‚Äî garante upsert idempotente e consultas class IRepo(..., ABC): @abstractmethod async def upsert_contribution_if_changed(self, entity: Contribution) -\u0026gt; tuple[Contribution, bool]: ... @abstractmethod async def get_contributions_that_are_not_yet_checked_with_relationship(self, **filters) -\u0026gt; list[Contribution]: ... # ... outros m√©todos ... ERP (agrega por per√≠odo) @dataclass(frozen=True, slots=True) class ContributionByPeriod: period: YearMonth type_of_contribution: int total_rem: Money tax_employee: Decimal tax_employer: Decimal total_contribution: Money Portal (agrega por taxa) @dataclass(frozen=True, slots=True) class ContributionByTax: period: YearMonth remuneration: Money tax: Decimal contribution: Money üß† Algoritmo (alto n√≠vel) Janela temporal: √∫ltimos 12 meses conclu√≠dos (YearMonth.last_12_completed_months()). Obter dados: ERP: ContributionByPeriod (taxa = empregado + entidade) Portal: ContributionByTax Bucketizar por (ano, m√™s, taxa): ERP: soma de total_rem e total_contribution Portal: soma de remuneration e contribution Comparar com toler√¢ncia: Se |erp_rem - portal_rem| \u0026lt;= tol e |erp_con - portal_con| \u0026lt;= tol ‚Üí OK Caso contr√°rio ‚Üí MismatchDTO Upsert idempotente: gravar/atualizar diverg√™ncias s√≥ se mudaram. Opcional: emitir eventos (relat√≥rio de RH, erros, m√©tricas). üßµ Concorr√™ncia \u0026amp; Retry (exemplo simplificado) class ReconcileService: def __init__(..., max_portal=2, max_erp=1, attempts=3, base=1.0, jitter=0.3, tol_eur=Decimal(\u0026#34;0.50\u0026#34;)): self._portal_sem = asyncio.BoundedSemaphore(max_portal) self._erp_sem = asyncio.BoundedSemaphore(max_erp) self._attempts, self._base, self._jitter = attempts, base, jitter self._tol = tol_eur async def _portal_with_retry(self, portal, start, end): async with self._portal_sem: attempt = 0 while True: try: return await portal.get_contributions_by_tax(start, end) except Exception: attempt += 1 if attempt \u0026gt;= self._attempts: raise delay = self._base * (2 ** (attempt - 1)) + random.uniform(0, self._jitter) await asyncio.sleep(delay) def _close(self, a: Money, b: Money) -\u0026gt; bool: return abs(a.amount - b.amount) \u0026lt;= self._tol Porque assim?\nSem√°foros evitam saturar BD/ERP/sess√µes de browser. Retry com backoff + jitter suaviza ‚Äúpicos‚Äù e lida melhor com limita√ß√µes/captcha. Toler√¢ncia monet√°ria reduz falsos positivos por arredondamentos. üìä Exemplo de Compara√ß√£o (core da decis√£o) def compare(company: CompanyRef, period: YearMonth, tax: Decimal, erp_rem: Money, erp_con: Money, por_rem: Money, por_con: Money, tol: Decimal) -\u0026gt; MismatchDTO | None: rem_close = abs(erp_rem.amount - por_rem.amount) \u0026lt;= tol con_close = abs(erp_con.amount - por_con.amount) \u0026lt;= tol if rem_close and con_close: return None return MismatchDTO( company=company, period=period, tax=tax, erp_remuneration=erp_rem, portal_remuneration=por_rem, erp_contribution=erp_con, portal_contribution=por_con, difference=(por_con - erp_con), ) ‚úÖ Resultados (exemplo realista) Tempo: ~5 min poupados por empresa/m√™s quando havia confer√™ncia manual.\nQualidade: menos esquecimentos de reenvio; diverg√™ncias expl√≠citas e audit√°veis.\nEscalabilidade: processa v√°rias empresas em paralelo (concorr√™ncia limitada).\nExtens√≠vel: serve de padr√£o para outras reconcilia√ß√µes (IVA, reten√ß√µes, bancos).\nM√©tricas exatas variam por contexto; percentagens e tempos acima s√£o indicativos.\nüîí Privacidade \u0026amp; Seguran√ßa N√£o exponho endpoints nem selectors do portal/ERP. Exemplos usam dados fict√≠cios e adapters gen√©ricos. O ‚Äúcore‚Äù de integra√ß√µes (autentica√ß√£o, Playwright, queries) permanece privado. üõ†Ô∏è Roadmap (ideias futuras) Painel com alertas por empresa/per√≠odo. Auto-retry programado e digest semanal de diverg√™ncias. Gera√ß√£o de relat√≥rios PDF/Excel para auditoria. Integra√ß√£o com fila de tarefas (ex.: Celery/RQ) e notifica√ß√µes (e-mail/Teams). üì¶ Como reutilizar os padr√µes Leva os Value Objects YearMonth e Money para o teu dom√≠nio. Cria ports (IErpService, IPortalService, IRepo) e implementa adapters locais. Aplica bucketiza√ß√£o + toler√¢ncia antes de comparar. Usa sem√°foros separados por recurso e retry com backoff+jitter para o alvo mais inst√°vel. Upsert idempotente em reposit√≥rio para n√£o duplicar diverg√™ncias. üí¨ Fala comigo Trabalhas em contabilidade/fintech e queres explorar automa√ß√£o de reconcilia√ß√µes (SAF-T, contribui√ß√µes, reten√ß√µes, bancos, etc.)?\nAdoro transformar processos repetitivos em sistemas robustos e audit√°veis.\nLinkedIn GitHub ","permalink":"https://fredericogago.github.io/frederico-gago/posts/reconciliacao-contribuicoes-erp-portal-python/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eResumo:\u003c/strong\u003e Como automatizei a reconcilia√ß√£o mensal de contribui√ß√µes entre um ERP e um portal externo.\u003cbr\u003e\nMostro \u003cstrong\u003epadr√µes reutiliz√°veis\u003c/strong\u003e: \u003cem\u003ebounded concurrency\u003c/em\u003e, \u003cem\u003eretry\u003c/em\u003e com backoff + jitter, \u003cstrong\u003etoler√¢ncia monet√°ria\u003c/strong\u003e, \u003cstrong\u003ebucketiza√ß√£o por per√≠odo+taxa\u003c/strong\u003e e \u003cstrong\u003eupsert idempotente\u003c/strong\u003e de diverg√™ncias ‚Äî usando \u003cem\u003evalue objects\u003c/em\u003e (\u003ccode\u003eYearMonth\u003c/code\u003e, \u003ccode\u003eMoney\u003c/code\u003e) e \u003cem\u003eports\u003c/em\u003e (interfaces).\u003cbr\u003e\n\u003cstrong\u003eSem expor integra√ß√µes reais\u003c/strong\u003e: o foco √© a arquitetura e as ideias reutiliz√°veis.\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"-contexto--problema\"\u003e‚öôÔ∏è Contexto \u0026amp; Problema\u003c/h2\u003e\n\u003cp\u003eEm RH, ap√≥s o processamento salarial (at√© dia 10 em PT), √© enviado o mapa de contribui√ß√µes do m√™s anterior para o portal oficial.\u003cbr\u003e\nSe ocorrerem \u003cstrong\u003ealtera√ß√µes\u003c/strong\u003e ap√≥s o envio (ajustes, faltas, pr√©mios, corre√ß√µes), √© \u003cstrong\u003ef√°cil esquecer\u003c/strong\u003e o reenvio do mapa corrigido ‚Äî gerando \u003cstrong\u003einconsist√™ncias\u003c/strong\u003e com risco regulat√≥rio e retrabalho.\u003c/p\u003e","title":"Reconcilia√ß√£o Autom√°tica de Contribui√ß√µes (ERP ‚Üî Portal) com Python"},{"content":"üî¢ Problem Statement LeetCode 14 ‚Äì Longest Common Prefix\nGiven an array of strings, return the longest common prefix among them. If no common prefix exists, return an empty string (\u0026quot;\u0026quot;).\nExample 1\nInput: [\u0026quot;flower\u0026quot;, \u0026quot;flow\u0026quot;, \u0026quot;flight\u0026quot;] ‚Üí Output: \u0026quot;fl\u0026quot; Example 2\nInput: [\u0026quot;dog\u0026quot;, \u0026quot;racecar\u0026quot;, \u0026quot;car\u0026quot;] ‚Üí Output: \u0026quot;\u0026quot; Constraints\n1 ‚â§ strs.length ‚â§ 200 0 ‚â§ strs[i].length ‚â§ 200 strs[i] contains only lowercase English letters if non-empty. üë®‚Äçüíª Solution Strategies We‚Äôll explore and compare five distinct approaches, from brute force to divide \u0026amp; conquer:\n# Approach Time Complexity Space Bench Rank 1 Horizontal Scan O(S) O(1) 4th 2 Zip-based Scan O(S) O(1) 3rd 3 Binary Search on Prefix Length O(S¬∑log m) O(1) 2nd 4 Sort \u0026amp; Compare (first vs last) O(n¬∑m + n log n) O(1) 1st 5 Divide \u0026amp; Conquer O(S¬∑log n) O(log n) 5th Where:\nn = number of strings m = length of the shortest string S = total number of characters across all strings üìù Detailed Breakdown 1. Horizontal Scan Compare each character position across all strings until a mismatch occurs.\nfor i in range(min_len): ch = strs[0][i] if all(s[i] == ch for s in strs): prefix += ch else: break üëç When to use: Very small input size or whiteboard interviews‚Äîsimple and intuitive.\n2. Zip-based Scan Transpose the list of strings with zip(*strs) and use set to detect divergence.\nfor letters in zip(*strs): if len(set(letters)) == 1: prefix += letters[0] else: break üëç When to use: Clean Pythonic code; moderate input sizes, readability prioritized.\n3. Binary Search on Prefix Length Binary‚Äêsearch the possible prefix length range [1..min_len], validating with startswith().\nlow, high = 1, min_len while low \u0026lt;= high: mid = (low + high) // 2 if is_common_prefix(mid): best = strs[0][:mid] low = mid + 1 else: high = mid - 1 üëç When to use: Strings are long (large m), and individual comparisons are expensive.\n4. Sort \u0026amp; Compare (First vs Last) Sort strs lexicographically; only the first and last items need comparison.\nstrs.sort() first, last = strs[0], strs[-1] for i, (a, b) in enumerate(zip(first, last)): if a != b: return first[:i] return first üëç When to use: Default choice‚Äîsmallest code footprint and best benchmark performance.\n5. Divide \u0026amp; Conquer Recursively split the array, compute LCP for each half, then merge.\ndef lcp_range(l, r): if l == r: return strs[l] mid = (l + r) // 2 left = lcp_range(l, mid) right = lcp_range(mid + 1, r) # merge two prefixes return common_prefix(left, right) üëç When to use: Academic deep dives or parallel execution frameworks.\nüìä Benchmark Results Average runtime per call (seconds):\nn Sort \u0026amp; Compare Binary Search Zip Scan Horizontal Scan Divide \u0026amp; Conquer 10 0.000012 0.000012 0.000021 0.000078 0.000061 100 0.000012 0.000034 0.000106 0.000424 0.000692 500 0.000017 0.000177 0.000546 0.002052 0.002920 1000 0.000022 0.000390 0.001079 0.005615 0.005845 2000 0.000052 0.000723 0.002315 0.008572 0.011302 üßë‚Äçüè´ When to Use Each Approach Sort \u0026amp; Compare: Go-to for most real-world cases‚Äîminimal code, fastest in practice. Binary Search: When strings are very long and each startswith check is expensive. Zip-based Scan: Super readable and concise; perfect for moderate input sizes. Horizontal Scan: Ultra-clear and memory-light; good for tiny lists or interview whiteboard. Divide \u0026amp; Conquer: Great for teaching or parallel frameworks‚Äîeven though recursion adds overhead. üí° Key Takeaways Constant‚Äêtime factors matter: two O(S) scans can differ drastically in practice. Benchmark on realistic data shapes before optimizing. Keep code simple unless a clear bottleneck exists. ‚è±Ô∏è Time Invested Analysis \u0026amp; design: 15 min Implementation \u0026amp; benchmarking: 30 min Writing \u0026amp; review: 10 min Total: ~ 55 min\nüîó Resources ‚ñ∂ Run on LeetCode üîó My Submission üíª Source Code on GitHub ‚úçÔ∏è Enjoyed this deep dive? Let‚Äôs connect on LinkedIn or explore more on GitHub.\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/longest-common-prefix/","summary":"\u003ch2 id=\"-problem-statement\"\u003eüî¢ Problem Statement\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eLeetCode 14 ‚Äì Longest Common Prefix\u003c/strong\u003e\u003cbr\u003e\nGiven an array of strings, return the longest common prefix among them. If no common prefix exists, return an empty string (\u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e).\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExample 1\u003c/strong\u003e\u003cbr\u003e\nInput: \u003ccode\u003e[\u0026quot;flower\u0026quot;, \u0026quot;flow\u0026quot;, \u0026quot;flight\u0026quot;]\u003c/code\u003e ‚Üí Output: \u003ccode\u003e\u0026quot;fl\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExample 2\u003c/strong\u003e\u003cbr\u003e\nInput: \u003ccode\u003e[\u0026quot;dog\u0026quot;, \u0026quot;racecar\u0026quot;, \u0026quot;car\u0026quot;]\u003c/code\u003e   ‚Üí Output: \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 ‚â§ strs.length ‚â§ 200\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0 ‚â§ strs[i].length ‚â§ 200\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estrs[i]\u003c/code\u003e contains only lowercase English letters if non-empty.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-solution-strategies\"\u003eüë®‚Äçüíª Solution Strategies\u003c/h2\u003e\n\u003cp\u003eWe‚Äôll explore and compare five distinct approaches, from brute force to divide \u0026amp; conquer:\u003c/p\u003e","title":"Longest Common Prefix: Five Algorithms Compared"},{"content":"From Spreadsheets to Scripts: My Journey Automating Accounting with Python My journey into process automation started at an accounting firm, where I quickly found myself buried in repetitive manual tasks and inefficient workflows. From processing invoices to reconciling spreadsheets, I could see how much time was being lost to work that could ‚Äî and should ‚Äî be automated.\nWhen I started working there, I spent the first few months organizing paperwork and doing basic data entry. I quickly realized two things:\nMany processes were slow, repetitive, and prone to errors. No one seemed to have time to improve them. That‚Äôs when I started asking questions: \u0026ldquo;Does it really need to be done this way?\u0026rdquo;, \u0026ldquo;Where are we losing time?\u0026rdquo;, \u0026ldquo;How can we simplify this?\u0026rdquo;\nThat curiosity led me to redesign small internal workflows. But there were limits. At some point, I realized automation was the only way to scale those improvements ‚Äî and that‚Äôs how my journey into programming began. I chose Python for its simplicity, elegance, and power: with just a few lines, I could achieve more than hours of manual work.\nAnd I never looked back.\nWhy Automate Accounting Processes? Automation isn‚Äôt just about saving time. It‚Äôs a competitive necessity:\n‚úÖ Fewer human errors ‚Äî Scripts don‚Äôt get distracted or misplace columns.\n‚úÖ More consistency ‚Äî The process runs the same way every time.\n‚úÖ Scalable efficiency ‚Äî Workload can grow without doubling the team.\n‚úÖ Happier employees ‚Äî Free time for higher-value tasks like analysis and strategy.\n‚úÖ Better compliance ‚Äî Automatically validate rules and generate audit logs.\n‚úÖ Data for decisions ‚Äî Capture real-time metrics and identify bottlenecks.\nAutomation doesn‚Äôt replace people ‚Äî it empowers them.\nWhy Python? Though it‚Äôs often associated with AI and Data Science, Python is a perfect fit for business automation:\nüß† Simple syntax: easy to learn, even for non-developers like accountants.\n‚ö° High productivity: do more with less code.\nüîß Libraries for everything:\npandas, openpyxl: Excel, CSV, structured data smtplib, requests: email, APIs fuzzywuzzy, difflib: smart reconciliations pdfplumber, PyPDF2: PDF extraction playwright, Selenium: browser automation üåç Connects with everything: ERP, banks, government portals, web services.\nü§ù Massive community: solutions, tutorials, support ‚Äî always just a search away.\nReal-World Examples of Python Automation üíº Import and consolidate Excel files ‚Äî hundreds of rows merged in seconds.\nüè¶ Smart bank reconciliation ‚Äî match statements using fuzzy logic.\nüìà Automated reporting ‚Äî generate PDFs with charts and send by email.\nüì• ERP journal entries via API ‚Äî connect to the ERP to post transactions from CSV files.\nüìä Internal dashboards ‚Äî lightweight apps with real-time financial data.\nüßæ Tax validations ‚Äî ensure correct VAT, dates, and NIF before submission.\nWhat About JavaScript/Node.js? JavaScript, with its Node.js runtime, can also be a good option for automating processes ‚Äî especially in companies with strong web development teams. It‚Äôs a versatile language, backed by a large community, capable of handling both simple scripts and complex applications.\nHowever, when it comes to back-office automation ‚Äî reading files, integrating systems, processing structured data ‚Äî Python stands out for its simplicity and power.\nJavaScript shines in user interfaces and interactive tools, while Python is the go-to for silent, background automations that handle large volumes of data elegantly.\nBoth languages can coexist and complement each other. But for those coming from business or accounting roles, and looking to automate daily tasks, Python remains unbeatable thanks to its easy learning curve, library ecosystem, and productivity focus.\nThe Key Is Internal Knowledge The biggest competitive edge isn‚Äôt code ‚Äî it‚Äôs knowing the process. When someone from inside the team understands the business and can code, they can build truly useful, tailored solutions.\nThat was my case: by understanding accounting workflows, I could apply Python to solve real problems. And that‚Äôs what many SMEs need: technology with context.\nWe‚Äôre here to solve problems ‚Äî that‚Äôs why automation (and even AI) won‚Äôt replace people, but rather empower them. Automating means giving people the right tools to focus on what really matters and make higher-impact decisions.\nConclusion Automating accounting isn‚Äôt just about saving time. It‚Äôs about building systems that are efficient, reliable, and human-centered.\nIf you\u0026rsquo;re a company, invest in hybrid talent ‚Äî people who understand the business and can code in Python.\nIf you\u0026rsquo;re an accounting professional, learn to code. You don‚Äôt need to be an engineer ‚Äî just start small. That‚Äôs how I did it.\nPython taught me that automation is about taking better care of the work, the people, and the future of business.\nReady to explore how Python automation can save time, reduce errors, and bring real value to your accounting workflows? Let‚Äôs connect! Feel free to reach out via LinkedIn or check out some of my projects on GitHub. I‚Äôm always up for sharing ideas or collaborating on meaningful automation challenges.\nüìå GitHub ‚Ä¢ LinkedIn ‚Ä¢ LeetCode\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/python-accounting-automation/","summary":"\u003ch1 id=\"from-spreadsheets-to-scripts-my-journey-automating-accounting-with-python\"\u003eFrom Spreadsheets to Scripts: My Journey Automating Accounting with Python\u003c/h1\u003e\n\u003cp\u003eMy journey into process automation started at an accounting firm, where I quickly found myself buried in repetitive manual tasks and inefficient workflows. From processing invoices to reconciling spreadsheets, I could see how much time was being lost to work that could ‚Äî and should ‚Äî be automated.\u003c/p\u003e\n\u003cp\u003eWhen I started working there, I spent the first few months organizing paperwork and doing basic data entry. I quickly realized two things:\u003c/p\u003e","title":"From Spreadsheets to Scripts: My Journey Automating Accounting with Python"},{"content":"üß© Problem: Roman to Integer (LeetCode 13) Convert a string representing a Roman numeral into its integer value. Roman numerals are typically written from largest to smallest (left to right), except for six well-known subtractive cases:\nI before V or X ‚Üí 4, 9 X before L or C ‚Üí 40, 90 C before D or M ‚Üí 400, 900 ‚úÖ Clean Idiomatic Solution (One-Pass) class Solution: SYMBOLS = { \u0026#39;I\u0026#39;: 1, \u0026#39;V\u0026#39;: 5, \u0026#39;X\u0026#39;: 10, \u0026#39;L\u0026#39;: 50, \u0026#39;C\u0026#39;: 100, \u0026#39;D\u0026#39;: 500, \u0026#39;M\u0026#39;: 1000 } def romanToInt(self, s: str) -\u0026gt; int: total = 0 prev_value = 0 for c in s: value = self.SYMBOLS[c] total += value - 2 * prev_value if value \u0026gt; prev_value else value prev_value = value return total Single loop Detects subtractive patterns with value \u0026gt; prev_value Clean inline logic ‚úÖ Runtime: 3 ms (faster than 79.17%)\n‚úÖ Memory: 17.6 MB (less than 90.19%)\nüîÅ Overengineered (but fun!) Functional Version def romanToGenerator(s): from operator import add, sub SYMBOLS = { \u0026#39;I\u0026#39;: 1, \u0026#39;V\u0026#39;: 5, \u0026#39;X\u0026#39;: 10, \u0026#39;L\u0026#39;: 50, \u0026#39;C\u0026#39;: 100, \u0026#39;D\u0026#39;: 500, \u0026#39;M\u0026#39;: 1000 } total = 0 prev_val = 0 for c in s: val = SYMBOLS[c] op = sub if prev_val \u0026lt; val else add delta = val if op is add else val - 2 * prev_val total += delta yield total Uses operator.add / operator.sub Yields intermediate results step-by-step Great for teaching or tracing, but slower üìä Benchmarks Version Avg. time (100K runs) Notes Idiomatic version ‚âà145 ms Fastest and cleanest Overengineered (list) ‚âà205 ms Stores operation pairs Overengineered (yield) ‚âà195 ms Generator-based, incremental üßÆ Complexity Analysis Time Complexity:\nBest / Worst / Average: O(n) ‚Äî single pass Space Complexity:\nIdiomatic: O(1) (constant variables) Overengineered (list): O(n) (stores ops) Overengineered (yield): O(1) (no intermediate structure) ‚è±Ô∏è Time Invested Reading and planning: 20 minutes Coding and analysis: 50 minutes Total: 1h10min üß† What I Learned Subtractive notation in Roman numerals can be generalized with value \u0026gt; prev_value. The difference between clean idiomatic solutions and overengineered abstractions in Python. How to benchmark Python code using timeit, and what tradeoffs come with generators and operator functions. The value of exploring multiple angles of a problem, even if the first solution works. üåç Real-World Applications Token-based parsing of custom numeric notations or symbolic expressions. Building interpreters or compilers that evaluate streams of symbols (e.g., financial codes, scientific notation). Teaching clean code versus functional design tradeoffs. Performance benchmarking and complexity analysis in educational content. üí¨ Personal Note What started as a simple Roman numeral conversion turned into an exploration of Python idioms, operator functions, generator design, and performance benchmarking.\nEven the simplest problems can reveal new learning paths if you\u0026rsquo;re curious enough üß†\nüìÇ Code Repository You can find my full source code for this solution on GitHub:\nüì¶ Repo: github.com/fredericogago/leetcode üìÑ File: Roman to Integer.py üë®‚Äçüíª Like this post? Let‚Äôs connect on LinkedIn or check out more on GitHub!\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/roman-to-integer/","summary":"\u003ch2 id=\"-problem-roman-to-integer-leetcode-13\"\u003eüß© Problem: Roman to Integer (\u003ca href=\"https://leetcode.com/problems/roman-to-integer/\"\u003eLeetCode 13\u003c/a\u003e)\u003c/h2\u003e\n\u003cp\u003eConvert a string representing a Roman numeral into its integer value.\nRoman numerals are typically written from largest to smallest (left to right),\nexcept for six well-known subtractive cases:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eI before V or X ‚Üí 4, 9\u003c/li\u003e\n\u003cli\u003eX before L or C ‚Üí 40, 90\u003c/li\u003e\n\u003cli\u003eC before D or M ‚Üí 400, 900\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-clean-idiomatic-solution-one-pass\"\u003e‚úÖ Clean Idiomatic Solution (One-Pass)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eSYMBOLS\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s1\"\u003e\u0026#39;I\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;V\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;X\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s1\"\u003e\u0026#39;L\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;C\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"s1\"\u003e\u0026#39;D\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e500\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;M\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eromanToInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eprev_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSYMBOLS\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eprev_value\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprev_value\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eprev_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSingle loop\u003c/li\u003e\n\u003cli\u003eDetects subtractive patterns with \u003ccode\u003evalue \u0026gt; prev_value\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClean inline logic\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e‚úÖ Runtime: 3 ms (faster than 79.17%)\u003cbr\u003e\n‚úÖ Memory: 17.6 MB (less than 90.19%)\u003c/p\u003e","title":"Roman to Integer ‚Äî Clean, Fast, and Functional Approaches Compared"},{"content":"üß© The Problem Given an integer x, determine whether it\u0026rsquo;s a palindrome ‚Äî that is, whether it reads the same forwards and backwards.\nüîó Problem Link: LeetCode 9. Palindrome Number\nExamples Input: x = 121 ‚Üí Output: True Input: x = -121 ‚Üí Output: False Input: x = 10 ‚Üí Output: False Bonus: Can you solve it without converting the integer to a string?\nüîç The Three Approaches I Explored 1. üí° Direct Solution with String Conversion def isPalindrome(x: int) -\u0026gt; bool: return str(x) == str(x)[::-1] Simple and fast (4 ms on LeetCode) But does not satisfy the follow-up constraint of avoiding strings 2. üìê Mathematical Reversal Using log10 and Closed-Form Formula Inspired by this StackExchange post, this solution uses a formula to reverse digits without strings:\nreverse(x) = x √ó 10‚Åø ‚àí 99 √ó Œ£‚Çñ floor(x / 10·µè) √ó 10‚Åø‚Åª·µè ‚úÖ No string conversion ‚úÖ Mathematically elegant ‚ö†Ô∏è Slightly slower due to log10() and exponentiation ‚ö†Ô∏è Can suffer from floating-point rounding issues 3. ‚öôÔ∏è Iterative Arithmetic Reversal (Preferred) def reverse(x: int) -\u0026gt; int: result = 0 while x \u0026gt; 0: result = result * 10 + x % 10 x //= 10 return result ‚úÖ No strings ‚úÖ Fast and stable ‚úÖ Easy to understand and debug ‚è±Ô∏è Benchmark Results Tested on values like 11, 101, 1001, ..., 10000001\nIterative method: ~0.000009 seconds Math (log10) method: ~0.000033 seconds ‚úÖ Both produce the correct result üìå Iterative is about 3.7√ó faster and more robust for real-world use\nüß† What I Learned How to reverse integers purely with arithmetic How to benchmark small Python functions using time.perf_counter() That elegance can sometimes come at a performance cost How to choose the right tradeoff between readability, correctness, and efficiency üåç Real-World Applications Palindrome logic pops up in places like:\nInput validation (e.g. palindromic IDs) Data compression using symmetry Embedded systems that don‚Äôt allow string types Constraints in coding interviews or systems-level code (like drivers/firmware) üìÇ Code Repository You can find my full source code for this solution on GitHub:\nüì¶ Repo: github.com/fredericogago/leetcode üìÑ File: Palindrome Number.py ‚úçÔ∏è Final Thoughts Solving the same problem in multiple ways helps me grow not only as a developer, but as a technical communicator. Being able to solve is great. Being able to explain clearly ‚Äî that‚Äôs where the real value is.\n\u0026ldquo;Hope it helps! I‚Äôm learning to write more elegant solutions with Python 3.13 and Clean Code.\u0026rdquo; üöÄ\nüë®‚Äçüíª Like this post? Let‚Äôs connect on LinkedIn or check out more on GitHub!\n","permalink":"https://fredericogago.github.io/frederico-gago/posts/palindrome-number/","summary":"\u003ch2 id=\"-the-problem\"\u003eüß© The Problem\u003c/h2\u003e\n\u003cp\u003eGiven an integer \u003ccode\u003ex\u003c/code\u003e, determine whether it\u0026rsquo;s a palindrome ‚Äî that is, whether it reads the same forwards and backwards.\u003c/p\u003e\n\u003cp\u003eüîó Problem Link: \u003ca href=\"https://leetcode.com/problems/palindrome-number/description/\"\u003eLeetCode 9. Palindrome Number\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = 121   ‚Üí Output: True\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = -121  ‚Üí Output: False\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eInput:  x = 10    ‚Üí Output: False\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eBonus: Can you solve it \u003cstrong\u003ewithout converting the integer to a string\u003c/strong\u003e?\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"-the-three-approaches-i-explored\"\u003eüîç The Three Approaches I Explored\u003c/h2\u003e\n\u003ch3 id=\"1--direct-solution-with-string-conversion\"\u003e1. üí° Direct Solution with String Conversion\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eisPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)[::\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSimple and fast (4 ms on LeetCode)\u003c/li\u003e\n\u003cli\u003eBut does \u003cstrong\u003enot\u003c/strong\u003e satisfy the follow-up constraint of avoiding strings\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"2--mathematical-reversal-using-log10-and-closed-form-formula\"\u003e2. üìê Mathematical Reversal Using \u003ccode\u003elog10\u003c/code\u003e and Closed-Form Formula\u003c/h3\u003e\n\u003cp\u003eInspired by \u003ca href=\"https://math.stackexchange.com/q/480068\"\u003ethis StackExchange post\u003c/a\u003e, this solution uses a formula to reverse digits without strings:\u003c/p\u003e","title":"Is It a Palindrome Number? Three Ways to Solve It Without Converting to String"},{"content":"Hi, I\u0026rsquo;m Frederico Gago, a passionate software developer dedicated to crafting solutions that transform complexity into clarity. I specialize in Python 3.13, Clean Architecture, SOLID principles, and thoughtful design patterns, driven by the belief that great software should feel intuitive, empowering, and elegant.\nMy mission is to redefine the way professionals‚Äîespecially in accounting and finance‚Äîinteract with their daily tasks. By automating routine processes and eliminating friction, I aim to help people reclaim their focus and creativity, enabling them to achieve more meaningful and impactful outcomes.\nThis blog is my space to openly share the challenges and triumphs of my technical journey, offering insights and practical examples drawn from real-world experiences. Whether I\u0026rsquo;m optimizing backend services, designing robust abstractions, or enhancing developer workflows, each post reflects my commitment to continuous growth and excellence.\nüìÑ Download CV üáµüáπ CV em Portugu√™s üá¨üáß CV in English Feel free to explore my work on GitHub or reach out through LinkedIn. Let\u0026rsquo;s connect and build software that makes work not just easier‚Äîbut truly inspiring.\n","permalink":"https://fredericogago.github.io/frederico-gago/about/","summary":"\u003cp\u003eHi, I\u0026rsquo;m \u003cstrong\u003eFrederico Gago\u003c/strong\u003e, a passionate software developer dedicated to crafting solutions that transform complexity into clarity. I specialize in Python 3.13, Clean Architecture, SOLID principles, and thoughtful design patterns, driven by the belief that great software should feel intuitive, empowering, and elegant.\u003c/p\u003e\n\u003cp\u003eMy mission is to redefine the way professionals‚Äîespecially in accounting and finance‚Äîinteract with their daily tasks. By automating routine processes and eliminating friction, I aim to help people reclaim their focus and creativity, enabling them to achieve more meaningful and impactful outcomes.\u003c/p\u003e","title":"About"},{"content":"I\u0026rsquo;d love to hear from you‚Äîwhether it\u0026rsquo;s to collaborate on a project, discuss software architecture, or simply connect.\nFeel free to reach out through any of the following:\nüìß Email: frederico.gago@hotmail.com\nüíº LinkedIn: linkedin.com/in/frederico-gago-5849281aa\nüíª GitHub: github.com/fredericogago\nüß† LeetCode: leetcode.com/u/fredericogago\nüìÑ Download CV üáµüáπ CV em Portugu√™s üá¨üáß CV in English ","permalink":"https://fredericogago.github.io/frederico-gago/contact/","summary":"\u003cp\u003eI\u0026rsquo;d love to hear from you‚Äîwhether it\u0026rsquo;s to collaborate on a project, discuss software architecture, or simply connect.\u003c/p\u003e\n\u003cp\u003eFeel free to reach out through any of the following:\u003c/p\u003e\n\u003cp\u003eüìß \u003cstrong\u003eEmail\u003c/strong\u003e: \u003ca href=\"mailto:frederico.gago@hotmail.com\"\u003efrederico.gago@hotmail.com\u003c/a\u003e\u003cbr\u003e\nüíº \u003cstrong\u003eLinkedIn\u003c/strong\u003e: \u003ca href=\"https://www.linkedin.com/in/frederico-gago-5849281aa\"\u003elinkedin.com/in/frederico-gago-5849281aa\u003c/a\u003e\u003cbr\u003e\nüíª \u003cstrong\u003eGitHub\u003c/strong\u003e: \u003ca href=\"https://github.com/fredericogago\"\u003egithub.com/fredericogago\u003c/a\u003e\u003cbr\u003e\nüß† \u003cstrong\u003eLeetCode\u003c/strong\u003e: \u003ca href=\"https://leetcode.com/u/fredericogago\"\u003eleetcode.com/u/fredericogago\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-download-cv\"\u003eüìÑ Download CV\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/frederico-gago/cv/FredericoGago_CV_PT.pdf\"\u003eüáµüáπ CV em Portugu√™s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/frederico-gago/cv/FredericoGago_CV_EN.pdf\"\u003eüá¨üáß CV in English\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Contact"}]